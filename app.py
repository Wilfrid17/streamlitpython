
# Adicione essas linhas no in√≠cio do seu script, antes das importa√ß√µes
import sys
import subprocess

def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# Lista de pacotes necess√°rios
required_packages = [
    'streamlit', 
    'gtts', 
    'googletrans==3.1.0a0', 
    'pydub'
]

# Instalar pacotes que possam estar faltando
for package in required_packages:
    try:
        __import__(package.split('==')[0])
    except ImportError:
        print(f"Instalando {package}...")
        install(package)


# Resto do seu c√≥digo original continua igual...
import streamlit as st  # Importa a biblioteca Streamlit para criar interfaces web interativas
import os  # Importa o m√≥dulo os para interagir com o sistema operacional (criar diret√≥rios, etc.)
from gtts import gTTS  # Importa Google Text-to-Speech para converter texto em fala
from pydub import AudioSegment  # Importa o m√≥dulo para manipula√ß√£o de arquivos de √°udio
import base64  # Importa o m√≥dulo para codifica√ß√£o/decodifica√ß√£o em base64 (usado para criar links de download)
from googletrans import Translator  # Importa o m√≥dulo para tradu√ß√£o de textos

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Tradutor e Conversor de Texto para Voz",  # Define o t√≠tulo da p√°gina
    page_icon="üîä",  # Define o √≠cone da p√°gina
    layout="wide"  # Define o layout como "wide" para usar toda a largura da tela
)

# Inicializa o tradutor do Google
translator = Translator()

# Fun√ß√£o para traduzir texto
def translate_text(text, target_language):
    """
    Traduz o texto para o idioma de destino.
    
    Par√¢metros:
    - text: Texto a ser traduzido
    - target_language: C√≥digo do idioma de destino (ex: 'en', 'es', 'fr')
    
    Retorno:
    - Texto traduzido
    """
    try:
        # Tenta fazer a tradu√ß√£o usando o Google Translator
        translated = translator.translate(text, dest=target_language)
        return translated.text
    except Exception as e:
        # Em caso de erro, exibe a mensagem e retorna o texto original
        st.error(f"Erro na tradu√ß√£o: {e}")
        return text

# Fun√ß√£o para converter texto em voz
def text_to_speech(text, language, speed=1.0):
    """
    Converte texto em arquivo de √°udio.
    
    Par√¢metros:
    - text: Texto a ser convertido
    - language: C√≥digo do idioma (ex: 'pt', 'en')
    - speed: Velocidade da fala (1.0 √© velocidade normal)
    
    Retorno:
    - Caminho para o arquivo de √°udio gerado
    """
    # Criar diret√≥rio tempor√°rio se n√£o existir
    if not os.path.exists("temp"):
        os.makedirs("temp")
    
    # Gerar o arquivo de √°udio usando Google TTS
    tts = gTTS(text=text, lang=language, slow=False)
    audio_file = "temp/audio_converted.mp3"
    tts.save(audio_file)
    
    # Ajustar a velocidade do √°udio se necess√°rio
    if speed != 1.0:
        audio = AudioSegment.from_mp3(audio_file)
        # Ajustar velocidade (valores menores que 1.0 aumentam a velocidade)
        audio_speed_adjusted = audio.speedup(playback_speed=speed)
        audio_speed_adjusted.export(audio_file, format="mp3")
    
    # Retornar o caminho do arquivo para download
    return audio_file

# Fun√ß√£o para criar link de download
def get_binary_file_downloader_html(bin_file, file_label='Arquivo'):
    """
    Cria um link HTML para download do arquivo de √°udio.
    
    Par√¢metros:
    - bin_file: Caminho para o arquivo bin√°rio
    - file_label: R√≥tulo para o link de download
    
    Retorno:
    - HTML com link de download
    """
    with open(bin_file, 'rb') as f:
        data = f.read()  # L√™ o arquivo bin√°rio
    bin_str = base64.b64encode(data).decode()  # Codifica o arquivo em base64
    # Cria um link HTML com o arquivo codificado em base64
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{os.path.basename(bin_file)}">Baixar {file_label}</a>'
    return href

# T√≠tulo e descri√ß√£o da aplica√ß√£o
st.title("üåê Tradutor e Conversor de Texto para Voz")
st.subheader("Traduza e transforme seu texto em √°udio em diferentes idiomas!")

# Painel lateral para configura√ß√µes
st.sidebar.header("Configura√ß√µes")

# Dicion√°rio com idiomas suportados e seus c√≥digos
idiomas = {
    "Portugu√™s": "pt",
    "Ingl√™s": "en",
    "Espanhol": "es",
    "Franc√™s": "fr",
    "Italiano": "it",
    "Alem√£o": "de",
    "Japon√™s": "ja",
    "Russo": "ru",
    "Chin√™s (Simplificado)": "zh-cn"
}

# Sele√ß√£o de idioma usando caixa de sele√ß√£o no sidebar
idioma_selecionado = st.sidebar.selectbox("Traduzir e converter para:", list(idiomas.keys()))

# Controle deslizante para ajustar a velocidade da fala
velocidade = st.sidebar.slider("Velocidade da fala:", min_value=0.5, max_value=1.5, value=1.0, step=0.1)

# Checkbox para pular tradu√ß√£o e usar texto original
pular_traducao = st.sidebar.checkbox("Pular tradu√ß√£o (usar texto original)", False)

# Informa√ß√µes adicionais no sidebar
st.sidebar.markdown("---")
st.sidebar.info("""
**Dicas:**
- O texto de entrada √© considerado como portugu√™s
- Para textos longos, a tradu√ß√£o pode levar alguns segundos
- Verifique a tradu√ß√£o antes de gerar o √°udio
- Ajuste a velocidade para obter uma fala mais natural
""")

# √Årea principal dividida em duas colunas
col1, col2 = st.columns([1, 1])

# Coluna para texto original
with col1:
    st.markdown("### Texto Original (Portugu√™s)")
    # √Årea de texto para entrada do usu√°rio, com um exemplo padr√£o
    texto_usuario = st.text_area("Digite ou cole seu texto em portugu√™s aqui:", 
                          "Ol√° a todos! Lembrem-se que teremos nossa reuni√£o semanal amanh√£ √†s 10h na sala de confer√™ncias. Por favor, tragam seus relat√≥rios atualizados e ideias para o pr√≥ximo trimestre..",
                          height=200)
    
    # Bot√µes de a√ß√£o para texto original, organizados em 3 colunas
    col_btn1, col_btn2, col_btn3 = st.columns(3)
    with col_btn1:
        traduzir = st.button("Traduzir", type="primary")  # Bot√£o prim√°rio para traduzir
    with col_btn2:
        gerar_audio_original = st.button("√Åudio em Portugu√™s")  # Bot√£o para gerar √°udio em portugu√™s
    with col_btn3:
        limpar = st.button("Limpar Texto")  # Bot√£o para limpar o texto
        if limpar:
            texto_usuario = ""  # Limpa o texto
            st.rerun()  # Reexecuta o app para refletir a mudan√ßa

# Coluna para texto traduzido
with col2:
    st.markdown(f"### Texto Traduzido ({idioma_selecionado})")
    
    # Vari√°vel para armazenar o texto traduzido usando session_state
    # Isso mant√©m o valor entre as reexecu√ß√µes do Streamlit
    if 'texto_traduzido' not in st.session_state:
        st.session_state.texto_traduzido = ""
    
    # Traduzir texto quando o bot√£o for pressionado
    if traduzir and texto_usuario:
        with st.spinner('Traduzindo...'):  # Mostra um spinner durante a tradu√ß√£o
            language_code = idiomas[idioma_selecionado]  # Obt√©m o c√≥digo do idioma
            texto_traduzido = translate_text(texto_usuario, language_code)  # Traduz o texto
            st.session_state.texto_traduzido = texto_traduzido  # Armazena na sess√£o
    
    # √Årea de texto para mostrar e editar a tradu√ß√£o
    texto_traduzido = st.text_area("Texto traduzido:", 
                            st.session_state.texto_traduzido,
                            height=200)
    
    # Bot√µes para texto traduzido, organizados em 2 colunas
    col_trad1, col_trad2 = st.columns(2)
    with col_trad1:
        gerar_audio_traduzido = st.button("Gerar √Åudio Traduzido", type="primary")  # Bot√£o para gerar √°udio traduzido
    with col_trad2:
        editar_traducao = st.button("Editar Tradu√ß√£o")  # Bot√£o para editar tradu√ß√£o (funcionalidade n√£o implementada)

# √Årea de player de √°udio e resultados
st.markdown("---")
st.markdown("### üéß Player de √Åudio")

# L√≥gica para gerar √°udio do texto original em portugu√™s
if gerar_audio_original and texto_usuario:
    with st.spinner('Gerando √°udio em portugu√™s...'):  # Mostra um spinner durante a gera√ß√£o do √°udio
        audio_path = text_to_speech(texto_usuario, "pt", velocidade)  # Gera o √°udio
        
        # Exibir player de √°udio integrado do Streamlit
        st.audio(audio_path)
        
        # Link para download do √°udio
        st.markdown(get_binary_file_downloader_html(audio_path, '√°udio em portugu√™s'), unsafe_allow_html=True)
        
        # Detalhes do arquivo gerado
        st.info(f"Idioma: Portugu√™s | Velocidade: {velocidade}x | Caracteres: {len(texto_usuario)}")

# L√≥gica para gerar √°udio do texto traduzido
elif gerar_audio_traduzido and (texto_traduzido or texto_usuario):
    with st.spinner(f'Gerando √°udio em {idioma_selecionado}...'):  # Mostra um spinner durante a gera√ß√£o do √°udio
        language_code = idiomas[idioma_selecionado]  # Obt√©m o c√≥digo do idioma
        
        # Determinar o texto a ser usado (original ou traduzido)
        if pular_traducao:
            texto_final = texto_usuario  # Usa o texto original
            st.warning("Usando texto original sem tradu√ß√£o")  # Avisa o usu√°rio
        else:
            # Se n√£o h√° tradu√ß√£o ainda, traduza agora
            if not texto_traduzido:
                texto_traduzido = translate_text(texto_usuario, language_code)
            texto_final = texto_traduzido  # Usa o texto traduzido
        
        audio_path = text_to_speech(texto_final, language_code, velocidade)  # Gera o √°udio
        
        # Exibir player de √°udio
        st.audio(audio_path)
        
        # Link para download
        st.markdown(get_binary_file_downloader_html(audio_path, f'√°udio em {idioma_selecionado}'), unsafe_allow_html=True)
        
        # Detalhes do arquivo
        st.info(f"Idioma: {idioma_selecionado} | Velocidade: {velocidade}x | Caracteres: {len(texto_final)}")
else:
    # Mensagem de instru√ß√µes quando nenhum √°udio foi gerado ainda
    st.info("Digite seu texto, traduza-o se desejar, e clique em um dos bot√µes de √°udio para criar seu arquivo de voz.")

# Se√ß√£o expans√≠vel com exemplos de texto
with st.expander("Ver exemplos de texto"):
    st.markdown("""
    **Mensagem motivacional:**
    ```
    Boa tarde, time! Que a gente comece este dia com energia e determina√ß√£o! Cada desafio √© uma oportunidade para aprender e crescer. Vamos seguir juntos, com foco e colabora√ß√£o, buscando sempre a melhoria e a efici√™ncia no nosso trabalho.
    ```
    
    **Lembrete de reuni√£o:**
    ```
    Ol√° a todos! Lembrem-se que teremos nossa reuni√£o semanal amanh√£ √†s 10h na sala de confer√™ncias. Por favor, tragam seus relat√≥rios atualizados e ideias para o pr√≥ximo trimestre.
    ```
    
    **Instru√ß√£o t√©cnica:**
    ```
    Para acessar o novo sistema, fa√ßa login com suas credenciais habituais e navegue at√© o menu "Configura√ß√µes". Em seguida, selecione "Prefer√™ncias do Usu√°rio" e ative a op√ß√£o "Novo Interface".
    ```
    """)

# Rodap√© com instru√ß√µes de uso
st.markdown("---")
st.markdown("### Como usar:")
st.markdown("""
1. Digite ou cole seu texto em portugu√™s na caixa da esquerda
2. Clique em "Traduzir" para converter para o idioma selecionado
3. Verifique e edite a tradu√ß√£o se necess√°rio
4. Escolha:
   - "√Åudio em Portugu√™s" para gerar √°udio do texto original
   - "Gerar √Åudio Traduzido" para criar √°udio no idioma selecionado
5. Ou√ßa o resultado e fa√ßa o download se desejar
""")

# Coment√°rio sobre limpeza de arquivos tempor√°rios
# Limpeza de arquivos tempor√°rios (em produ√ß√£o, voc√™ pode implementar uma limpeza peri√≥dica)
# Esta parte √© opcional e pode ser implementada de diferentes formas